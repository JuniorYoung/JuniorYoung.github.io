{"meta":{"title":"YangYu's Blob","subtitle":"副主题","description":"路漫漫其修远兮 吾将上下而求索","author":"YangYu","url":"https://www.yangyu.us"},"pages":[{"title":"links","date":"2018-08-13T12:54:49.000Z","updated":"2018-11-28T18:26:53.382Z","comments":true,"path":"links/index.html","permalink":"https://www.yangyu.us/links/index.html","excerpt":"","text":"扩展连接"},{"title":"","date":"2018-12-23T10:02:32.363Z","updated":"2018-12-23T10:02:32.363Z","comments":true,"path":"mind-notes/index.html","permalink":"https://www.yangyu.us/mind-notes/index.html","excerpt":"","text":"browsercssjavascriptperformance-optimizationreactreact-routerreduxweb-security"},{"title":"about","date":"2018-08-13T12:29:58.000Z","updated":"2018-11-28T18:26:44.369Z","comments":true,"path":"about/index.html","permalink":"https://www.yangyu.us/about/index.html","excerpt":"","text":"这是一个关于我页面"}],"posts":[{"title":"三种方式实现圣杯布局","slug":"三种方式实现圣杯布局","date":"2018-09-08T14:42:30.000Z","updated":"2018-11-30T10:51:10.629Z","comments":true,"path":"2018/09/08/三种方式实现圣杯布局/","link":"","permalink":"https://www.yangyu.us/2018/09/08/三种方式实现圣杯布局/","excerpt":"本文讲述如何使用浮动、弹性盒子、网格实现经典的圣杯布局。","text":"本文讲述如何使用浮动、弹性盒子、网格实现经典的圣杯布局。 圣杯布局实现了三栏液态布局 (所谓液态布局是相对固态布局而言的，固态布局就是固定元素宽度不变的布局，液态就好比在容器里到了一杯水，它可以随着容器宽度的变化而自适应宽度)，它的布局要求下面几点： 两边固定宽度，中间宽度自适应。 中间的DOM元素在渲染树中优先于两边DOM元素渲染。 第一种方法：浮动See the Pen 圣杯布局-浮动实现 by JuniorYoung (@junioryoung) on CodePen. DOM结构1234567&lt;header&gt;头部&lt;/header&gt;&lt;section class=\"container\"&gt; &lt;div class=\"col main\"&gt;主内容区&lt;/div&gt; &lt;aside class=\"col left\"&gt;左侧内容&lt;/aside&gt; &lt;aside class=\"col right\"&gt;右侧内容&lt;/aside&gt;&lt;/section&gt;&lt;footer&gt;底部&lt;/footer&gt; 实现过程 在书写DOM元素时，将主内容区位于首位（优先加载）。 设置三列的宽度。.main为width: 100%，.left固定width: 100px，.right固定width: 120px。 设置三列的position: relative、float: left。 设置.container的overflow: hidden清除浮动（或其他清除浮动的方式），并设置.container的padding: 0 120px 0 100px（留出的左右内边距的空间用来放置左右元素）。 移动左边元素到左内边距。设置.left的margin-left: -100%（左外边距为负值时，会覆盖前面元素的空间）、left: -100px（.container的左内边距）。 移动右边元素到右内边距。设置.right的margin-left: -120px（.container的右内边距），此时由于存在右内边距，.right元素的位置偏左，所以需设置right: -120px。 弊端当主内容区的元素宽度小于左侧元素宽度时，布局会混乱，后来玉伯大神提出的双飞翼布局有效的解决了此问题。以下是双飞翼布局的实现： See the Pen 双飞翼布局 by JuniorYoung (@junioryoung) on CodePen. 第二种方法：弹性盒子See the Pen 圣杯布局-Flex实现 by JuniorYoung (@junioryoung) on CodePen. DOM结构1234567&lt;header&gt;头部&lt;/header&gt;&lt;section class=\"container\"&gt; &lt;div class=\"col main\"&gt;主内容区&lt;/div&gt; &lt;aside class=\"col left\"&gt;左侧内容&lt;/aside&gt; &lt;aside class=\"col right\"&gt;右侧内容&lt;/aside&gt;&lt;/section&gt;&lt;footer&gt;底部&lt;/footer&gt; 实现过程 设置.container的display: flex。 设置.main的flex: auto（相当于flex: 1 1 auto，伸缩比例都为1，初始宽度自适应），并指定显示顺序order: 2。 设置.left的flex: 0 0 100px，不伸缩，固定宽度100px，指定显示顺序order: 1。 设置.right的flex: 0 0 120px，不伸缩，固定宽度120px，指定显示顺序order: 3。 flex布局相比浮动更简洁但是兼容性更逊色，只支持IE10+。 第三种方法：网格See the Pen 圣杯布局-Grid实现 by JuniorYoung (@junioryoung) on CodePen. DOM结构12345&lt;header&gt;头部&lt;/header&gt;&lt;div class=\"main\"&gt;主内容区&lt;/div&gt;&lt;aside class=\"left\"&gt;左侧内容&lt;/aside&gt;&lt;aside class=\"right\"&gt;右侧内容&lt;/aside&gt;&lt;footer&gt;底部&lt;/footer&gt; 实现过程 设置body的display: grid。 构建一个三行三列的网格。grid-template-columns: 100px auto 120px; grid-template-rows: 50px minmax(200px, auto) 50px。第一列宽100px，第二列自适应宽度，第三列宽120px，第一行与第三行高50px，第二行使用minmax()函数设置高度自适应但最小200px。 使用grid-area分别命名各元素。.main：main，.left：left，.right：right，&lt;header&gt;：header，&lt;footer&gt;：footer。 设置body的grid-template-areas: &quot;header header header&quot; &quot;left main right&quot; &quot;footer footer footer&quot;，header和footer横跨三列，.main元素虽然在DOM顺序中位于.left前面，但是此处使用网格命名布局属性指定.left元素位于第二行第一列，.main为第二行第二列，.right为第二行第三列。 Grid布局是新特性，只支持IE10+，在IE中使用需要指定前缀-ms-。 扩展阅读CSS布局奇淫巧计之-强大的负边距","categories":[{"name":"前端","slug":"前端","permalink":"https://www.yangyu.us/categories/前端/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://www.yangyu.us/tags/CSS/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-06-14T02:46:57.882Z","updated":"2018-06-14T02:46:57.882Z","comments":true,"path":"2018/06/14/hello-world/","link":"","permalink":"https://www.yangyu.us/2018/06/14/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}